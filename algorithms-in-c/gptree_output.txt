# Project Directory Structure:
.
├── .gptree_config
├── 2/
│   ├── Fraction.c
│   ├── Fraction.h
│   ├── a.out
│   ├── exercise-03.c
│   ├── exercise-04.c
│   ├── exercise-05.c
│   ├── exercise-06.c
│   ├── gcd.c
│   ├── gcd.h
│   └── scratchpad.c
└── 3/

# BEGIN FILE CONTENTS

# File: 2/exercise-06.c

#include <stdio.h>
#include "./gcd.h"

int main (void) {
  int x = 12345, y = 56789;

  gcd_mod_debug(x, y);

  return 0;
}


# END FILE CONTENTS


# File: 2/exercise-03.c

#include <stdio.h>
#include <stdlib.h>
#include "./gcd.h"
#include "./Fraction.h"

int main(void) {
  Fraction fraction = Fraction_get();

  char* stringified_fraction = Fraction_stringify(&fraction);

  printf("Entered fraction: %s\n", stringified_fraction);

  free(stringified_fraction);

  int _gcd = gcd(fraction.numerator, fraction.denominator);

  Fraction_divide(&fraction, _gcd);

  stringified_fraction = Fraction_stringify(&fraction);

  printf("The lowest terms of the fraction is: %s\n", stringified_fraction);

  free(stringified_fraction);

  return 0;
}



# END FILE CONTENTS


# File: 2/Fraction.c

#include <stdlib.h>
#include <stdio.h>
#include "./Fraction.h"

Fraction Fraction_get() {
  int numerator;
  int denominator;

  printf("Enter the numerator: ");
  scanf("%d", &numerator);
  printf("Enter the denominator: ");
  scanf("%d", &denominator);

  Fraction fraction = { .numerator = numerator, .denominator = denominator };

  return fraction;
}

void Fraction_divide(Fraction *fraction, int divisor) {
  fraction->numerator /= divisor;
  fraction->denominator /= divisor;
}

char* Fraction_stringify(Fraction *fraction) {
  /* int len = 7 + ; */
  char* buffer = malloc(1024);
  sprintf(buffer, "[ %d / %d ]", fraction->numerator, fraction->denominator);
  return buffer;
}


# END FILE CONTENTS


# File: 2/exercise-04.c

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

int convert(char* stringified_number) {
  int len = strlen(stringified_number);
  int value = 0;

  for (int i = len; i > 0; i--) {
    char current_string_digit = stringified_number[len - i];
    int current_digit = atoi(&current_string_digit);
    int current_digit_to_right_power = current_digit * pow(10, i - 1);

    value += current_digit_to_right_power;
  }

  return value;
}

int main (void) {
  char* user_input = malloc(1024);
  
  printf("Enter a number: ");
  scanf("%s", user_input);

  int converted_user_input = convert(user_input);
  printf("The value of the converted user input is: %d\n", converted_user_input);

  free(user_input);

  return 0;
}


# END FILE CONTENTS


# File: .gptree_config

# GPTree Local Config
version: 2

# Whether to use .gitignore
useGitIgnore: true
# File types to include (e.g., .py,.js)
includeFileTypes: *
# File types to exclude when includeFileTypes is '*'
excludeFileTypes: 
# Output file name
outputFile: gptree_output.txt
# Whether to output the file locally or relative to the project directory
outputFileLocally: true
# Whether to copy the output to the clipboard
copyToClipboard: false
# Whether to use safe mode (prevent overly large files from being combined)
safeMode: true
# Whether to store the files chosen in the config file (--save, -s)
storeFilesChosen: true
# Whether to include line numbers in the output (--line-numbers, -n)
lineNumbers: false
# Whether to show ignored files in the directory tree
showIgnoredInTree: false
# Whether to show only default ignored files in the directory tree while still respecting gitignore
showDefaultIgnoredInTree: false
# Previously selected files (when using the -s or --save flag previously)
previousFiles: 


# END FILE CONTENTS


# File: 2/Fraction.h

#ifndef C_ALGORITHMS_CH2_FRACTION

#define C_ALGORITHMS_CH2_FRACTION

typedef struct {
  int numerator;
  int denominator;
} Fraction;

Fraction Fraction_get();

void Fraction_divide(Fraction *fraction, int divisor);

char* Fraction_stringify(Fraction *fraction);

#endif


# END FILE CONTENTS


# File: 2/exercise-05.c

#include <stdio.h>
#include <stdlib.h>

char* binary(int num) {
  char* buffer = malloc(1024);
  int i = 0;

  while (num >= 1) {
    buffer[i] = num % 2 == 0 ? '0' : '1';
    num /= 2;
    i++;
  }

  for (int j = 0; j < i / 2; j++) {
    char t = buffer[(i - 1) - j];
    buffer[(i - 1) - j] = buffer[j];
    buffer[j] = t;
  }

  return buffer;
}

int main(void) {
  int user_input;
  
  printf("Enter a number: ");
  scanf("%d", &user_input);

  printf("The number the user entered: %d\n", user_input);

  char* binary_equivalent = binary(user_input);

  printf("Binary equivalent: %s\n", binary_equivalent);

  free(binary_equivalent);

  return 0;
}


# END FILE CONTENTS


# File: 2/gcd.h

#ifndef C_ALGORITHIMS_CH2_GCD

#define C_ALGORITHIMS_CH2_GCD

int gcd(int u, int v);

int gcd_mod_debug(int u, int v);

int gcd_traditional(int u, int v);

#endif


# END FILE CONTENTS


# File: 2/gcd.c

#include <stdio.h>

int gcd(int u, int v) {
  int t;

  while (u > 0) {
    if (u < v) {
      t = u;
      u = v;
      v = t;
    }

    u = u % v;
  }

  return v;
}

int gcd_mod_debug(int u, int v) {
  int t;

  while (u > 0) {
    if (u < v) {
      t = u;
      u = v;
      v = t;
    }

    printf("u = %d, v = %d, u %% v = %d\n", u, v, u % v);

    u = u % v;
  }

  return v;
}

int gcd_traditional(int u, int v) {
  int t;

  while (u > 0) {
    if (u < v) {
      t = u;
      u = v;
      v = t;
    }

    u = u - v;
  }

  return v;
}


# END FILE CONTENTS


# File: 2/scratchpad.c

#include <stdio.h>
#include "./gcd.h"

int main(void) {
  int x = 461952, y = 116298;
  int x = 2, y = 3;

  while (scanf("%d %d", &x, &y) != EOF) {
    if (x > 0 && y > 0) {
      int _gcd1 = gcd(x, y);
      int _gcd2 = gcd2(x, y);
      printf("[gcd] %d %d %d\n", x, y, _gcd1);
      printf("[gcd2] %d %d %d\n", x, y, _gcd2);
    }
  }
}


# END FILE CONTENTS
